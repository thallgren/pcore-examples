<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1484954441529">{:repl-history {:ide [], :local [&quot;(def com.puppet.pcore.TypeEvaluator x)&quot; &quot;(def t com.puppet.pcore.TypeEvaluator)&quot; &quot;t&quot; &quot;(t.parse \&quot;Array\&quot;)&quot; &quot;(t#parse \&quot;Array\&quot;)&quot; &quot;(t/parse \&quot;Array\&quot;)&quot; &quot;(com.puppet.pcore.TypeEvaluator/parse \&quot;Array\&quot;)&quot; &quot;(com.puppet.pcore.Pcore/typeEvaluator \&quot;Array\&quot;)&quot; &quot;(com.puppet.pcore.Pcore/typeEvaluator)&quot; &quot;(.typeEvaluator com.puppet.pcore.Pcore)&quot; &quot;(.getTypeEvaluator com.puppet.pcore.Pcore)&quot; &quot;(def 0 x)&quot; &quot;(def x 0)&quot; &quot;x&quot; &quot;(def Pcore com.puppet.pcore.Pcore/INSTANCE)&quot; &quot;(.typeEvaluator Pcore)&quot; &quot;(.parse (.typeEvaluator Pcore) \&quot;Array\&quot;)&quot; &quot;(.resolve (.typeEvaluator Pcore) \&quot;Array\&quot;)&quot; &quot;(def Array (.resolve (.typeEvaluator Pcore) \&quot;Array\&quot;))&quot; &quot;(.isInstance Array [1 2 3])&quot; &quot;(.isInstance Array (1 2 3))&quot; &quot;(.isInstance Array #(1 2 3))&quot; &quot;(.isInstance Array (vector 1 2 3))&quot; &quot;(defn hello [] result)&quot; &quot;(defn hello [] (#result))&quot; &quot;(defn hello [] (#result x) )&quot; &quot;(defn hello [] ('result) )&quot; &quot;hello&quot; &quot;(hello)&quot; &quot;(hello [])&quot; &quot;(.isInstance Array (seq (1 2 3)))&quot; &quot;(.isInstance Array (seq '(1 2 3)))&quot; &quot;(.isInstance Array '(1 2 3))&quot; &quot;'(1 2 3)&quot; &quot;[1 2 3]&quot; &quot;(def x #(inc %))&quot; &quot;(x 3)&quot; &quot;(def x #(hello %))&quot; &quot;(def x #(say-hello %))&quot; &quot;(defn even-numbers\n  ([] (even-numbers 0))\n  ([n] (cons n (even-numbers (+ n 2)))))&quot; &quot;(take 10 (event-numbers))&quot; &quot;(take 10 (even-numbers))&quot; &quot;(cons 1 2)&quot; &quot;(cons 1 '(2)) &quot; &quot;(map identity {:sunlight-reaction \&quot;Glitter!\&quot;})&quot; &quot;(into (map identity {:sunlight-reaction \&quot;Glitter!\&quot;})) &quot; &quot;(into [] (map identity {:sunlight-reaction \&quot;Glitter!\&quot;})) &quot; &quot;(identity 12)&quot; &quot;(map first (partition-by identity [1 1 2 3 3 1 1 5 5]))&quot; &quot;(into [1 2] [3 4])&quot; &quot;(.infer (.typeCalculator Pcore) 3)&quot; &quot;(.infer Pcore 3)&quot; &quot;(ns-map *ns*)&quot; &quot;(for [k v] {:a 1 :b 2} #(%))&quot; &quot;(for [[k v] {:a 1 :b 2}]  [k v])&quot; &quot;(for [[k v] {:a 1 :b 2}]  [k (inc v)])&quot; &quot;(defn ptype\n  [obj] \n  ((.infer com.uppet.pcore.Pcore) obj))&quot; &quot;(defn ptype\n  [obj] \n  (.infer com.puppet.pcore.Pcore/INSTANCE) obj)&quot; &quot;(defn ptype\n  [obj] \n  (.infer (.INSTANCE com.puppet.pcore.Pcore))   obj)&quot; &quot;(defn ptype\n  [obj] \n  ((.infer com.puppet.pcore.Pcore/INSTANCE) obj))&quot; &quot;(defn ptype\n  [obj] \n  (.infer com.puppet.pcore.Pcore/INSTANCE obj))&quot; &quot;(ptype 3)&quot; &quot;\n(defn resolve-type [type-string]\n  (.resolve (Pcore/typeEvaluator) type-string))\n&quot; &quot;\n(declare-type \&quot;Hey\&quot; \&quot;Integer\&quot;)\n&quot; &quot;(resolve-type \&quot;Hey\&quot;)&quot; &quot;(with-local-scope println)&quot; &quot;(with-local-scope \&quot;hello\&quot;)&quot; &quot;(with-local-scope (println \&quot;Hello\&quot;))&quot; &quot;(with-local-scope #(println \&quot;Hello\&quot;))&quot; &quot;(with-local-scope #((println \&quot;Hello\&quot;) (println \&quot;World\&quot;)) \&quot;returning this\&quot;) &quot; &quot;(with-local-scope #((println \&quot;Hello\&quot;) (println \&quot;World\&quot;) \&quot;returning this\&quot;)) &quot; &quot;(with-local-scope #((println \&quot;Hello\&quot;) (println \&quot;World\&quot;) \&quot;returning this\&quot;))&quot; &quot;(with-local-scope '((println \&quot;Hello\&quot;) (println \&quot;World\&quot;) \&quot;returning this\&quot;))&quot; &quot;((println \&quot;Hello\&quot;) (println \&quot;World\&quot;) \&quot;returning this\&quot;)&quot; &quot;(defn foo [] (println \&quot;Hello\&quot;) (println \&quot;World\&quot;) \&quot;returning this\&quot;)&quot; &quot;(foo)&quot; &quot;(with-local-scope foo)&quot; &quot;(defn foo [a b c] (println a) (println b) c)&quot; &quot;(foo \&quot;Hello\&quot; \&quot;World\&quot; \&quot;Returning\&quot;)&quot; &quot;(with-local-scope foo \&quot;Hello\&quot; \&quot;there\&quot; \&quot;world\&quot;)&quot; &quot;(with-local-scope foo \&quot;Hello\&quot; \&quot;there\&quot; \&quot;this was it\&quot;)&quot;], :remote []}}</component>
</project>